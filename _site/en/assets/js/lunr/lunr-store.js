var store = [{
        "title": "Jekyll Install on Ubuntu 18.04 LTS",
        "excerpt":"우분투 18.04 LTS 환경에 Jekyll 설치하기  Installing Jekyll on Ubuntu 18.04 LTS    오래전부터 깃허브 기술 블로그를 만들어야겠다고 생각해왔고 시도도 많이 했지만, 매번 작업 환경을 구성하는 단계에서 포기했다. 우선, 가장 일반적인 깃허브 기술 블로그 개발 환경은 macOs에서 Jekyll을 이용하는 방법인데, 블로그를 하나 만들기 위해 맥북을 구매하기에는 너무 큰 지출이 발생하므로, 우분투 18.04 LTS 환경에서 Jekyll을 설치하여 진행하고자 한다.   작업 환경설정   Jekyll은 ruby로 작성된 소프트웨어이므로 이를 설치하기 위해서는 먼저 ruby를 설치해야한다. ruby로 작성된 소프트웨어들은 적용되는 버젼이 각각 다르기 때문에 패키지 관리자를 통해 단일 버젼만을 설치하게되면 추후 매우 곤란한 상황에 빠지게 될 수 있다. 그러므로 우리는 rbenv(루비 버젼 관리 소프트웨어)을 이용해 ruby를 설치할 것이다.   apt-get update 및 필요 라이브러리 설치   $ sudo apt-get update  $ sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs   rbenv 설치하기   $ git clone https://github.com/rbenv/rbenv.git ~/.rbenv   rbenv 환경변수 설정   다음 명령어들을 실행하고 ~/.bashrc 파일을 확인해보면 다음 내용들이 맨 아래에 추가된 것을 확인할 수 있다.   $ echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bashrc  $ echo 'eval \"$(rbenv init -)\"' &gt;&gt; ~/.bashrc  $ exec $SHELL   ruby-build 설치하기   $ git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build  $ echo 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' &gt;&gt; ~/.bashrc  $ exec $SHELL   rbenv 해시 재정렬   $ rbenv rehash   rbenv로 ruby 설치하기   2.6.3 버젼을 사용하며 큰 문제없이 잘 사용 중이므로 2.6.3 버젼을 선택했지만 버젼 선택은 알아서 하면된다.   $ rbenv install 2.6.3   $ rbenv global 2.6.3   $ rbenv rehash   지킬 설치   rbenv를 이용해 ruby를 설치하게되면 gem이 함께 설치된다.. apt와 같은 패키지 관리자라고 생각하면 된다. gem 명령어를 이용해 설치한 소프트웨어들은 gem이라고 불리운다.   $ gem install jekyll  bundler 설치   설치된 gem이 또다른 gem을 의존하는 경우, Gemfile이라는 파일에 해당 의존성을 기술하여 bundle install이라는 명령어를 통해 일괄적으로 설치할 수 있다. bundler는 gem application dependency manager의 역할을 한다.   $ gem install bundler   Jekyll 시작   새 프로젝트 생성   새 프로젝트를 생성하고 해당 경로로 이동해 jekyll serve하면 로컬 서버에 요청시 기본 블로그 화면을 볼 수 있다. 깃허브 블로그를 생성할 목적이라면 프로젝트명을 githubId.github.io의 형식으로 하는것이 일반적이다.   $ Jekyll new project_name    $ cd project_name  ~/project_name $ jekyll serve   bundler 활용 example  프로젝스 폴더로 이동해 Gemfile을 연다.   ~/project_name $ vi Gemfile  맨 아래 줄에 다음과 같은 의존성을 기록한다.   gem 'jekyll-admin', group: :jekyll_plugins  기록된 의존성에 따른 플러그인을 install하고 jekyll serve한다.   $ bundle install  $ cd ~/project_name   ~/project_name $ jekyll serve   http://localhost:4000/admin/로 연결하면 graphical한 admin 페이지를 확인할 수 있다.  ","categories": ["jekyll"],
        "tags": [],
        "url": "http://localhost:4000/en/blog/2020-01-26/01",
        "teaser":null},{
        "title": "Hello!",
        "excerpt":"Hello my blog   2020-01-26 12:47:03 +0900   ","categories": ["jekyll","update"],
        "tags": [],
        "url": "http://localhost:4000/en/blog/2020-01-26/hello",
        "teaser":null},{
        "title": "vim editor 환경설정하기",
        "excerpt":"vim editor .vimrc 설정하기  How to set up .vimrc file    작년 여름이였나.. 학교에서 UNIX 관련 수업을 때 vim editor를 처음 사용해봤다. 처음에는 단축키와 방향키 같은게 너무 불편했지만 종강이 다가올 때쯤 나는 vim 에디터의 키맵핑에 완전히 적응해버렸다. 지금 생각해보면 vim 키맵핑을 익혀둔건 생산성 측면에서 많은 도움이 된다고 생각한다. 요즘은 정말 훌륭한 텍스트 편집기들이 많기 때문*에 딱히 신선한 정보는 아닐 수 있지만, 현재 내가 큰 불만없이 사용하고있는 .vimrc파일 내용을 공유하고자 한다.   .vimrc   다음 내용을 ~/.vimrc 파일에 붙여넣으면 설정 내용들이 동작한다.  만약 .vimrc 파일이 존재하지 않는다면 ~/ 경로에 .vimrc 파일을 생성해주자.   \" 구문강조 사용 syntax on   set nocompatible  \" 검색어 하이라이팅  set hlsearch   \" 줄번호  set nu   \" 자동 들여쓰기 set autoindent   set scrolloff=2  set wildmode=longest,list   \" tag select  set ts=4   \" st select  set sts=4   \" 스크롤바 너비 set sw=1   \" 다른 파일로 넘어갈 때 자동 저장 set autowrite   \" 작업 중인 파일 외부에서 변경됬을 경우 자동으로 불러옴 set autoread   \" C언어 style 자동 들여쓰기 set cindent   set history=100  \" 상태바 표시 항상 set laststatus=2   \" 들여쓰기 너비 설정 set shiftwidth=4   set smarttab set smartindent set softtabstop=4 set tabstop=4  \" 현재 커서 위치 표시 set ruler   set statusline=\\ %&lt;%l:%v\\ [%P]%=%a\\ %h%m%r\\ %F\\  \" 파일저장인코딩  set fileencoding=utf-8   \" 줄의 끝, 시작, 들여쓰기에서 백스페이스시 이전줄로 set backspace=eol,start,indent   \" 키워드 입력시 점진적 검색 set incsearch   \" 검색시 대소문자 무시, set ic 도 가능 set ignorecase   \" 터미널 인코딩 set tenc=utf-8        \" 한글 파일은 euc-kr로, 유니코드는 유니코드로 set fencs=ucs-bom,utf-8,euc-kr.latin1   \"Key mappings Leader key 설정 let mapleader=\",\"  \" 마우스 사용 여부 \" on map &lt;F7&gt; &lt;ESC&gt;:set mouse=a&lt;CR&gt; \" off map &lt;F8&gt; &lt;ESC&gt;:set mouse-=a&lt;CR&gt;  \" moving \" insert mode inoremap jk &lt;esc&gt;  \" normal mode nnoremap &lt;S-l&gt; $ nnoremap &lt;S-h&gt; ^ nnoremap d&lt;S-l&gt; d$ nnoremap d&lt;S-h&gt; d^ nnoremap &lt;Tab&gt; &gt;&gt; nnoremap &lt;S-Tab&gt; &lt;&lt; nnoremap &lt;C-k&gt; :m--&lt;CR&gt;== nnoremap &lt;C-j&gt; :m +1&lt;CR&gt;== nnoremap &lt;S-k&gt; k  \"실수로 help 열지 않기 위한 맵핑 nnoremap &lt;leader&gt;h &lt;S-k&gt;  \" visual mode vnoremap &lt;S-l&gt; $ vnoremap &lt;S-h&gt; ^  ","categories": ["Linux"],
        "tags": [],
        "url": "http://localhost:4000/en/blog/2020-01-27/01",
        "teaser":null},{
        "title": "Github 블로그 생성하기 / Jekyll 활용",
        "excerpt":"Jekyll을 활용해서 Github 정적 블로그 생성하기    이전 포스트에서는 우분투 18.04 LTS 환경에 Jekyll을 설치하는 내용을 다루었다. 이제 본격적으로 Jekyll을 활용하여 Github 블로그를 생성해보자.  Github Repository 생성하기  Create a New Repository   먼저 우리가 만들 Github 블로그의 테마, 포스트 등을 업로드할 저장소를 생성하자. Repository name은 블로그 생성 후에 도메인으로 사용되므로 userName.github.io의 포맷으로 입력하자.      $ git clone Jekyll-theme    이제 블로그의 테마를 다운받을 차례이다. 편의상 사용자 홈 디렉토리에서 진행하도록 하겠다. 설명을 위해 특정 테마를 정해야하므로 많은 테마들 중 가장 인기있고 무난한 Minimal Mistakes 테마를 선택했다. 참고로 이 블로그도 Minimal Mistakes를 사용ㅎ.. 혹시라도 이 테마가 마음에 들지 않는다면 Jekyll Theme 에서 마음에 드는 테마를 골라서 다운받으면 된다.  $ cd ~ $ git clone https://github.com/mmistakes/minimal-mistakes.git $ cd minimal-mistakes $ bundle exec jekyll serve  아래와 같은 내용이 출력되면 성공. jekyll serve 명령어 이후 쉘이 다시 등장하지 않는다고 당황하지말자.. 로컬 서버가 정상적으로 동작하고있다는 의미이다.  Configuration file: /home/userName/minimal-mistakes/_config.yml             Source: /home/userName/minimal-mistakes        Destination: /home/userName/minimal-mistakes/_site  Incremental build: disabled. Enable with --incremental       Generating...         Jekyll Feed: Generating feed for posts                     done in 0.199 seconds.  Auto-regeneration: enabled for '/home/userName/minimal-mistakes'     Server address: http://127.0.0.1:4000   Server running... press ctrl-c to stop.    이제 http://127.0.0.1:4000/ 또는 http://localhost:4000/ 로 연결하여 테마가 적용된 블로그를 확인할 수 있다. 서버를 중지하고 싶으면 Ctrl + c 키를 눌러 인터럽트 신호를 보내면 된다.   $ git clone user Repo    이제 모든 준비가 완료되었다. 처음에 만들었던 userName.github.io 저장소를 clone하고 로컬 저장소에 minimal-mistakes를 통채로 복사한 후 커밋하면 정적 github 블로그가 생성된다.  $ cd ~ $ git clone 저장소_URL $ cp -r minimal-mistakes/* 로컬_저장소_폴더명 $ cd 로컬_저장소_폴더명 $ git add . $ git commit -m \"hello my blog\" $ git push origin master   몇 분 정도 지나고 https://userName.github.io 에 연결을 하면 블로그가 생성된 것을 확인 할 수 있다.   마치며    글로 써보면 많은 내용이 아니지만, 작업 환경을 구성하는 과정이 꽤 복잡했다. 까먹을 수도 있으니까 여기다가 다 적어놔야지..  ","categories": ["jekyll"],
        "tags": [],
        "url": "http://localhost:4000/en/blog/2020-01-27/02",
        "teaser":null}]
